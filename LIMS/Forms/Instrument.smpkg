Security Tag:43-F2-8E-4C-0F-FE-BF-E2-51-B1-6E-74-E6-AA-19-4D-B0-C5-24-14
{
  "name": "Form - Instrument",
  "description": "Entity Deployment Package",
  "Timestamp": "2025-01-02T14:38:21.217",
  "Version": "21.2.0.0",
  "operations": [
    {
      "description": "Data Check",
      "operation": "data_check",
      "deploy_action": "Run",
      "icon": "INT_AUDITING",
      "datastore": {}
    },
    {
      "description": "File smp$programs:Forms\\Overlay\\Instrument.xml > Extension for Instrument",
      "operation": "deploy_file",
      "icon": "DOCUMENT",
      "datastore": {
        "Instrument.xml": {
          "name": "Instrument.xml",
          "description": "Extension for Instrument",
          "logical": "smp$programs",
          "path": "Forms\\Overlay\\Instrument.xml",
          "data": ""
        }
      }
    },
    {
      "description": "File smp$forms:Instrument.frm > XML for Instrument.frm",
      "operation": "deploy_form",
      "icon": "FORM_BLUE",
      "datastore": {
        "Instrument.frm": {
          "name": "Instrument.frm",
          "description": "XML for Instrument.frm",
          "logical": "smp$forms",
          "path": "Instrument.frm",
          "data": ""
        }
      }
    }
  ]
}